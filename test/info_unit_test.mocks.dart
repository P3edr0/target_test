// Mocks generated by Mockito 5.4.4 from annotations
// in target_test/test/info_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:target_test/data/datasources/info_datasource.dart' as _i3;
import 'package:target_test/domain/usecases/info_usecases/info_usecase_exceptions.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IFetchListDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIFetchListDatasource extends _i1.Mock
    implements _i3.IFetchListDatasource {
  @override
  _i4.Future<_i2.Either<_i5.IInfoUsecaseExceptions, String>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.IInfoUsecaseExceptions, String>>.value(
                _FakeEither_0<_i5.IInfoUsecaseExceptions, String>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.IInfoUsecaseExceptions, String>>.value(
                _FakeEither_0<_i5.IInfoUsecaseExceptions, String>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.IInfoUsecaseExceptions, String>>);
}

/// A class which mocks [IInsertItemListDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIInsertItemListDatasource extends _i1.Mock
    implements _i3.IInsertItemListDatasource {
  @override
  _i4.Future<_i2.Either<_i5.IInfoUsecaseExceptions, String>> call(
    String? item,
    List<String>? list,
    int? index,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            item,
            list,
            index,
          ],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.IInfoUsecaseExceptions, String>>.value(
                _FakeEither_0<_i5.IInfoUsecaseExceptions, String>(
          this,
          Invocation.method(
            #call,
            [
              item,
              list,
              index,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.IInfoUsecaseExceptions, String>>.value(
                _FakeEither_0<_i5.IInfoUsecaseExceptions, String>(
          this,
          Invocation.method(
            #call,
            [
              item,
              list,
              index,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.IInfoUsecaseExceptions, String>>);
}

/// A class which mocks [IUpdateItemListDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIUpdateItemListDatasource extends _i1.Mock
    implements _i3.IUpdateItemListDatasource {
  @override
  _i4.Future<_i2.Either<_i5.IInfoUsecaseExceptions, String>> call(
    _i3.IUpdateItemListDatasource? iUpdateItemListDatasource,
    int? index,
    String? updatedItem,
    List<String>? list,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            iUpdateItemListDatasource,
            index,
            updatedItem,
            list,
          ],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.IInfoUsecaseExceptions, String>>.value(
                _FakeEither_0<_i5.IInfoUsecaseExceptions, String>(
          this,
          Invocation.method(
            #call,
            [
              iUpdateItemListDatasource,
              index,
              updatedItem,
              list,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.IInfoUsecaseExceptions, String>>.value(
                _FakeEither_0<_i5.IInfoUsecaseExceptions, String>(
          this,
          Invocation.method(
            #call,
            [
              iUpdateItemListDatasource,
              index,
              updatedItem,
              list,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.IInfoUsecaseExceptions, String>>);
}

/// A class which mocks [IDeleteItemListDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIDeleteItemListDatasource extends _i1.Mock
    implements _i3.IDeleteItemListDatasource {
  @override
  _i4.Future<_i2.Either<_i5.IInfoUsecaseExceptions, String>> call(
    int? index,
    List<String>? list,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            index,
            list,
          ],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.IInfoUsecaseExceptions, String>>.value(
                _FakeEither_0<_i5.IInfoUsecaseExceptions, String>(
          this,
          Invocation.method(
            #call,
            [
              index,
              list,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.IInfoUsecaseExceptions, String>>.value(
                _FakeEither_0<_i5.IInfoUsecaseExceptions, String>(
          this,
          Invocation.method(
            #call,
            [
              index,
              list,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.IInfoUsecaseExceptions, String>>);
}
